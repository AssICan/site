"""
Django settings for walless project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
from walless_utils import cfg, config_setup, setup_everything
import logging
walless_logger = logging.getLogger('walless')
config_setup()
if os.environ.get("EARLY_SETUP", "0") == "1":
    walless_logger.warning("Early setup is enabled.")
    log_path = os.path.expanduser('~/.var/log/walless_site.log')
    setup_everything(
        log_paths=[log_path], pull_node=True, pull_user=True, 
        user_pool_kwargs={'enable_only': False}
    )


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'WARNING'),
            'propagate': False,
        },
    },
}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

SECRET_KEY = cfg['django']['secret']
ALLOWED_HOSTS = cfg['django']['allowed_hosts']
CSRF_TRUSTED_ORIGINS = cfg['django']['csrf_trusted_origins']

# Application definition

INSTALLED_APPS = [
    'main.apps.MainConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'walless.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'walless.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

if cfg['db']['type'] == 'mysql':
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": cfg['db']['credentials']['database'],
            "USER": cfg['db']['credentials']['user'],
            "PASSWORD": cfg['db']['credentials']['password'],
            "HOST": cfg['db']['credentials']['host'],
            "PORT": cfg['db']['credentials']['port'],
        }
    }
elif cfg['db']['type'] == 'mssql':
    DATABASES = {
        "default": {
            "ENGINE": "mssql",
            "NAME": cfg['db']['credentials']['database'],
            "USER": cfg['db']['credentials']['user'],
            "PASSWORD": cfg['db']['credentials']['password'],
            "HOST": cfg['db']['credentials']['host'],
            "PORT": cfg['db']['credentials']['port'],
            "OPTIONS": {
                "driver": "ODBC Driver 18 for SQL Server",
            }
        }
    }
else:
    raise NotImplementedError('Only MySQL and MSSQL are supported')


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
